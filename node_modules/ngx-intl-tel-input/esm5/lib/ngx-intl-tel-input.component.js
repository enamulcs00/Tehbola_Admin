import { __decorate, __metadata } from "tslib";
import * as lpn from 'google-libphonenumber';
import { Component, ElementRef, EventEmitter, forwardRef, Input, Output, ViewChild } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { CountryCode } from './data/country-code';
import { CountryISO } from './enums/country-iso.enum';
import { SearchCountryField } from './enums/search-country-field.enum';
import { TooltipLabel } from './enums/tooltip-label.enum';
import { phoneNumberValidator } from './ngx-intl-tel-input.validator';
var Éµ0 = phoneNumberValidator;
var NgxIntlTelInputComponent = /** @class */ (function () {
    function NgxIntlTelInputComponent(countryCodeData) {
        this.countryCodeData = countryCodeData;
        this.value = '';
        this.preferredCountries = [];
        this.enablePlaceholder = true;
        this.cssClass = 'form-control';
        this.onlyCountries = [];
        this.enableAutoCountrySelect = true;
        this.searchCountryFlag = false;
        this.searchCountryField = [SearchCountryField.All];
        this.searchCountryPlaceholder = 'Search Country';
        this.maxLength = '';
        this.selectFirstCountry = true;
        this.phoneValidation = true;
        this.inputId = 'phone';
        this.separateDialCode = false;
        this.countryChange = new EventEmitter();
        this.selectedCountry = {
            areaCodes: undefined,
            dialCode: '',
            flagClass: '',
            iso2: '',
            name: '',
            placeHolder: '',
            priority: 0,
        };
        this.phoneNumber = '';
        this.allCountries = [];
        this.preferredCountriesInDropDown = [];
        // Has to be 'any' to prevent a need to install @types/google-libphonenumber by the package user...
        this.phoneUtil = lpn.PhoneNumberUtil.getInstance();
        this.disabled = false;
        this.errors = ['Phone number is required.'];
        this.countrySearchText = '';
        this.onTouched = function () { };
        this.propagateChange = function (_) { };
    }
    NgxIntlTelInputComponent_1 = NgxIntlTelInputComponent;
    NgxIntlTelInputComponent.prototype.ngOnInit = function () {
        this.init();
    };
    NgxIntlTelInputComponent.prototype.ngOnChanges = function (changes) {
        var selectedISO = changes['selectedCountryISO'];
        if (this.allCountries &&
            selectedISO &&
            selectedISO.currentValue !== selectedISO.previousValue) {
            this.getSelectedCountry();
        }
        if (changes.preferredCountries) {
            this.getPreferredCountries();
        }
        this.checkSeparateDialCodeStyle();
    };
    /*
        This is a wrapper method to avoid calling this.ngOnInit() in writeValue().
        Ref: http://codelyzer.com/rules/no-life-cycle-call/
    */
    NgxIntlTelInputComponent.prototype.init = function () {
        var _this = this;
        this.fetchCountryData();
        if (this.preferredCountries.length) {
            this.getPreferredCountries();
        }
        if (this.onlyCountries.length) {
            this.allCountries = this.allCountries.filter(function (c) {
                return _this.onlyCountries.includes(c.iso2);
            });
        }
        if (this.selectFirstCountry) {
            if (this.preferredCountriesInDropDown.length) {
                this.setSelectedCountry(this.preferredCountriesInDropDown[0]);
            }
            else {
                this.setSelectedCountry(this.allCountries[0]);
            }
        }
        this.getSelectedCountry();
        this.checkSeparateDialCodeStyle();
    };
    NgxIntlTelInputComponent.prototype.getPreferredCountries = function () {
        var _this = this;
        if (this.preferredCountries.length) {
            this.preferredCountriesInDropDown = [];
            this.preferredCountries.forEach(function (iso2) {
                var preferredCountry = _this.allCountries.filter(function (c) {
                    return c.iso2 === iso2;
                });
                _this.preferredCountriesInDropDown.push(preferredCountry[0]);
            });
        }
    };
    NgxIntlTelInputComponent.prototype.getSelectedCountry = function () {
        var _this = this;
        if (this.selectedCountryISO) {
            this.selectedCountry = this.allCountries.find(function (c) {
                return c.iso2.toLowerCase() === _this.selectedCountryISO.toLowerCase();
            });
            if (this.selectedCountry) {
                if (this.phoneNumber) {
                    this.onPhoneNumberChange();
                }
                else {
                    // Reason: avoid https://stackoverflow.com/a/54358133/1617590
                    // tslint:disable-next-line: no-null-keyword
                    this.propagateChange(null);
                }
            }
        }
    };
    NgxIntlTelInputComponent.prototype.setSelectedCountry = function (country) {
        this.selectedCountry = country;
        this.countryChange.emit(country);
    };
    /**
     * Search country based on country name, iso2, dialCode or all of them.
     */
    NgxIntlTelInputComponent.prototype.searchCountry = function () {
        var _this = this;
        if (!this.countrySearchText) {
            this.countryList.nativeElement
                .querySelector('.country-list li')
                .scrollIntoView({
                behavior: 'smooth',
                block: 'nearest',
                inline: 'nearest',
            });
            return;
        }
        var countrySearchTextLower = this.countrySearchText.toLowerCase();
        var country = this.allCountries.filter(function (c) {
            if (_this.searchCountryField.indexOf(SearchCountryField.All) > -1) {
                // Search in all fields
                if (c.iso2.toLowerCase().startsWith(countrySearchTextLower)) {
                    return c;
                }
                if (c.name.toLowerCase().startsWith(countrySearchTextLower)) {
                    return c;
                }
                if (c.dialCode.startsWith(_this.countrySearchText)) {
                    return c;
                }
            }
            else {
                // Or search by specific SearchCountryField(s)
                if (_this.searchCountryField.indexOf(SearchCountryField.Iso2) > -1) {
                    if (c.iso2.toLowerCase().startsWith(countrySearchTextLower)) {
                        return c;
                    }
                }
                if (_this.searchCountryField.indexOf(SearchCountryField.Name) > -1) {
                    if (c.name.toLowerCase().startsWith(countrySearchTextLower)) {
                        return c;
                    }
                }
                if (_this.searchCountryField.indexOf(SearchCountryField.DialCode) > -1) {
                    if (c.dialCode.startsWith(_this.countrySearchText)) {
                        return c;
                    }
                }
            }
        });
        if (country.length > 0) {
            var el = this.countryList.nativeElement.querySelector('#' + country[0].iso2);
            if (el) {
                el.scrollIntoView({
                    behavior: 'smooth',
                    block: 'nearest',
                    inline: 'nearest',
                });
            }
        }
        this.checkSeparateDialCodeStyle();
    };
    NgxIntlTelInputComponent.prototype.onPhoneNumberChange = function () {
        var countryCode;
        // Handle the case where the user sets the value programatically based on a persisted ChangeData obj.
        if (this.phoneNumber && typeof this.phoneNumber === 'object') {
            var numberObj = this.phoneNumber;
            this.phoneNumber = numberObj.number;
            countryCode = numberObj.countryCode;
        }
        this.value = this.phoneNumber;
        countryCode = countryCode || this.selectedCountry.iso2.toUpperCase();
        var number;
        try {
            number = this.phoneUtil.parse(this.phoneNumber, countryCode);
        }
        catch (e) { }
        // auto select country based on the extension (and areaCode if needed) (e.g select Canada if number starts with +1 416)
        if (this.enableAutoCountrySelect) {
            countryCode =
                number && number.getCountryCode()
                    ? this.getCountryIsoCode(number.getCountryCode(), number)
                    : this.selectedCountry.iso2;
            if (countryCode && countryCode !== this.selectedCountry.iso2) {
                var newCountry = this.allCountries.find(function (c) { return c.iso2 === countryCode; });
                if (newCountry) {
                    this.selectedCountry = newCountry;
                }
            }
        }
        countryCode = countryCode ? countryCode : this.selectedCountry.iso2;
        this.checkSeparateDialCodeStyle();
        if (!this.value) {
            // Reason: avoid https://stackoverflow.com/a/54358133/1617590
            // tslint:disable-next-line: no-null-keyword
            this.propagateChange(null);
        }
        else {
            var intlNo = number
                ? this.phoneUtil.format(number, lpn.PhoneNumberFormat.INTERNATIONAL)
                : '';
            // parse phoneNumber if separate dial code is needed
            if (this.separateDialCode && intlNo) {
                this.value = this.removeDialCode(intlNo);
            }
            this.propagateChange({
                number: this.value,
                internationalNumber: intlNo,
                nationalNumber: number
                    ? this.phoneUtil.format(number, lpn.PhoneNumberFormat.NATIONAL)
                    : '',
                e164Number: number
                    ? this.phoneUtil.format(number, lpn.PhoneNumberFormat.E164)
                    : '',
                countryCode: countryCode.toUpperCase(),
                dialCode: '+' + this.selectedCountry.dialCode,
            });
        }
    };
    NgxIntlTelInputComponent.prototype.onCountrySelect = function (country, el) {
        this.setSelectedCountry(country);
        this.checkSeparateDialCodeStyle();
        if (this.phoneNumber && this.phoneNumber.length > 0) {
            this.value = this.phoneNumber;
            var number = void 0;
            try {
                number = this.phoneUtil.parse(this.phoneNumber, this.selectedCountry.iso2.toUpperCase());
            }
            catch (e) { }
            var intlNo = number
                ? this.phoneUtil.format(number, lpn.PhoneNumberFormat.INTERNATIONAL)
                : '';
            // parse phoneNumber if separate dial code is needed
            if (this.separateDialCode && intlNo) {
                this.value = this.removeDialCode(intlNo);
            }
            this.propagateChange({
                number: this.value,
                internationalNumber: intlNo,
                nationalNumber: number
                    ? this.phoneUtil.format(number, lpn.PhoneNumberFormat.NATIONAL)
                    : '',
                e164Number: number
                    ? this.phoneUtil.format(number, lpn.PhoneNumberFormat.E164)
                    : '',
                countryCode: this.selectedCountry.iso2.toUpperCase(),
                dialCode: '+' + this.selectedCountry.dialCode,
            });
        }
        else {
            // Reason: avoid https://stackoverflow.com/a/54358133/1617590
            // tslint:disable-next-line: no-null-keyword
            this.propagateChange(null);
        }
        el.focus();
    };
    NgxIntlTelInputComponent.prototype.onInputKeyPress = function (event) {
        var allowedChars = /[0-9\+\-\ ]/;
        var allowedCtrlChars = /[axcv]/; // Allows copy-pasting
        var allowedOtherKeys = [
            'ArrowLeft',
            'ArrowUp',
            'ArrowRight',
            'ArrowDown',
            'Home',
            'End',
            'Insert',
            'Delete',
            'Backspace',
        ];
        if (!allowedChars.test(event.key) &&
            !(event.ctrlKey && allowedCtrlChars.test(event.key)) &&
            !allowedOtherKeys.includes(event.key)) {
            event.preventDefault();
        }
    };
    NgxIntlTelInputComponent.prototype.fetchCountryData = function () {
        var _this = this;
        /* Clearing the list to avoid duplicates (https://github.com/webcat12345/ngx-intl-tel-input/issues/248) */
        this.allCountries = [];
        this.countryCodeData.allCountries.forEach(function (c) {
            var country = {
                name: c[0].toString(),
                iso2: c[1].toString(),
                dialCode: c[2].toString(),
                priority: +c[3] || 0,
                areaCodes: c[4] || undefined,
                flagClass: c[1].toString().toLocaleLowerCase(),
                placeHolder: '',
            };
            if (_this.enablePlaceholder) {
                country.placeHolder = _this.getPhoneNumberPlaceHolder(country.iso2.toUpperCase());
            }
            _this.allCountries.push(country);
        });
    };
    NgxIntlTelInputComponent.prototype.getPhoneNumberPlaceHolder = function (countryCode) {
        try {
            return this.phoneUtil.format(this.phoneUtil.getExampleNumber(countryCode), lpn.PhoneNumberFormat.INTERNATIONAL);
        }
        catch (e) {
            return e;
        }
    };
    NgxIntlTelInputComponent.prototype.registerOnChange = function (fn) {
        this.propagateChange = fn;
    };
    NgxIntlTelInputComponent.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    NgxIntlTelInputComponent.prototype.setDisabledState = function (isDisabled) {
        this.disabled = isDisabled;
    };
    NgxIntlTelInputComponent.prototype.writeValue = function (obj) {
        var _this = this;
        if (obj === undefined) {
            this.init();
        }
        this.phoneNumber = obj;
        setTimeout(function () {
            _this.onPhoneNumberChange();
        }, 1);
    };
    NgxIntlTelInputComponent.prototype.getCountryIsoCode = function (countryCode, number) {
        // Will use this to match area code from the first numbers
        var rawNumber = number['values_']['2'].toString();
        // List of all countries with countryCode (can be more than one. e.x. US, CA, DO, PR all have +1 countryCode)
        var countries = this.allCountries.filter(function (c) { return c.dialCode === countryCode.toString(); });
        // Main country is the country, which has no areaCodes specified in country-code.ts file.
        var mainCountry = countries.find(function (c) { return c.areaCodes === undefined; });
        // Secondary countries are all countries, which have areaCodes specified in country-code.ts file.
        var secondaryCountries = countries.filter(function (c) { return c.areaCodes !== undefined; });
        var matchedCountry = mainCountry ? mainCountry.iso2 : undefined;
        /*
            Iterate over each secondary country and check if nationalNumber starts with any of areaCodes available.
            If no matches found, fallback to the main country.
        */
        secondaryCountries.forEach(function (country) {
            country.areaCodes.forEach(function (areaCode) {
                if (rawNumber.startsWith(areaCode)) {
                    matchedCountry = country.iso2;
                }
            });
        });
        return matchedCountry;
    };
    NgxIntlTelInputComponent.prototype.separateDialCodePlaceHolder = function (placeholder) {
        return this.removeDialCode(placeholder);
    };
    NgxIntlTelInputComponent.prototype.removeDialCode = function (phoneNumber) {
        if (this.separateDialCode && phoneNumber) {
            phoneNumber = phoneNumber.substr(phoneNumber.indexOf(' ') + 1);
        }
        return phoneNumber;
    };
    // adjust input alignment
    NgxIntlTelInputComponent.prototype.checkSeparateDialCodeStyle = function () {
        if (this.separateDialCode && this.selectedCountry) {
            var cntryCd = this.selectedCountry.dialCode;
            this.separateDialCodeClass =
                'separate-dial-code iti-sdc-' + (cntryCd.length + 1);
        }
        else {
            this.separateDialCodeClass = '';
        }
    };
    var NgxIntlTelInputComponent_1;
    NgxIntlTelInputComponent.ctorParameters = function () { return [
        { type: CountryCode }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NgxIntlTelInputComponent.prototype, "value", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], NgxIntlTelInputComponent.prototype, "preferredCountries", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NgxIntlTelInputComponent.prototype, "enablePlaceholder", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NgxIntlTelInputComponent.prototype, "cssClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], NgxIntlTelInputComponent.prototype, "onlyCountries", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NgxIntlTelInputComponent.prototype, "enableAutoCountrySelect", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NgxIntlTelInputComponent.prototype, "searchCountryFlag", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], NgxIntlTelInputComponent.prototype, "searchCountryField", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NgxIntlTelInputComponent.prototype, "searchCountryPlaceholder", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NgxIntlTelInputComponent.prototype, "maxLength", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NgxIntlTelInputComponent.prototype, "tooltipField", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NgxIntlTelInputComponent.prototype, "selectFirstCountry", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NgxIntlTelInputComponent.prototype, "selectedCountryISO", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NgxIntlTelInputComponent.prototype, "phoneValidation", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NgxIntlTelInputComponent.prototype, "inputId", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NgxIntlTelInputComponent.prototype, "separateDialCode", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], NgxIntlTelInputComponent.prototype, "countryChange", void 0);
    __decorate([
        ViewChild('countryList'),
        __metadata("design:type", ElementRef)
    ], NgxIntlTelInputComponent.prototype, "countryList", void 0);
    NgxIntlTelInputComponent = NgxIntlTelInputComponent_1 = __decorate([
        Component({
            // tslint:disable-next-line: component-selector
            selector: 'ngx-intl-tel-input',
            template: "<div class=\"intl-tel-input allow-dropdown\"\n\t[ngClass]=\"separateDialCodeClass\">\n\t<div class=\"flag-container\"\n\t\tdropdown\n\t\t[ngClass]=\"{'disabled': disabled}\"\n\t\t[isDisabled]=\"disabled\">\n\t\t<div class=\"selected-flag dropdown-toggle\"\n\t\t\tdropdownToggle>\n\t\t\t<div class=\"iti-flag\"\n\t\t\t\t[ngClass]=\"selectedCountry?.flagClass\"\n\t\t\t\t[tooltip]=\"selectedCountry ? selectedCountry[tooltipField] : ''\"></div>\n\t\t\t<div *ngIf=\"separateDialCode\"\n\t\t\t\tclass=\"selected-dial-code\">+{{selectedCountry.dialCode}}</div>\n\t\t\t<div class=\"iti-arrow\"></div>\n\t\t</div>\n\t\t<div *dropdownMenu\n\t\t\tclass=\"dropdown-menu country-dropdown\">\n\t\t\t<div class=\"search-container\"\n\t\t\t\t*ngIf=\"searchCountryFlag && searchCountryField\">\n\t\t\t\t<input id=\"country-search-box\"\n\t\t\t\t\t[(ngModel)]=\"countrySearchText\"\n\t\t\t\t\t(keyup)=\"searchCountry()\"\n\t\t\t\t\t(click)=\"$event.stopPropagation()\"\n\t\t\t\t\t[placeholder]=\"searchCountryPlaceholder\"\n\t\t\t\t\tautofocus>\n\t\t\t</div>\n\t\t\t<ul class=\"country-list\"\n\t\t\t\t#countryList>\n\t\t\t\t<li class=\"country\"\n\t\t\t\t\t*ngFor=\"let country of preferredCountriesInDropDown\"\n\t\t\t\t\t(click)=\"onCountrySelect(country, focusable)\"\n\t\t\t\t\t[id]=\"country.iso2\">\n\t\t\t\t\t<div class=\"flag-box\">\n\t\t\t\t\t\t<div class=\"iti-flag\"\n\t\t\t\t\t\t\t[ngClass]=\"country.flagClass\"></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<span class=\"country-name\">{{country.name}}</span>\n\t\t\t\t\t<span class=\"dial-code\">+{{country.dialCode}}</span>\n\t\t\t\t</li>\n\t\t\t\t<li class=\"divider\"\n\t\t\t\t\t*ngIf=\"preferredCountriesInDropDown?.length\"></li>\n\t\t\t\t<li class=\"country\"\n\t\t\t\t\t*ngFor=\"let country of allCountries\"\n\t\t\t\t\t(click)=\"onCountrySelect(country, focusable)\"\n\t\t\t\t\t[id]=\"country.iso2\">\n\t\t\t\t\t<div class=\"flag-box\">\n\t\t\t\t\t\t<div class=\"iti-flag\"\n\t\t\t\t\t\t\t[ngClass]=\"country.flagClass\"></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<span class=\"country-name\">{{country.name}}</span>\n\t\t\t\t\t<span class=\"dial-code\">+{{country.dialCode}}</span>\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t</div>\n\t</div>\n\t<input type=\"tel\"\n\t\t[id]=\"inputId\"\n\t\tautocomplete=\"off\"\n\t\t[ngClass]=\"cssClass\"\n\t\t(blur)=\"onTouched()\"\n\t\t(keypress)=\"onInputKeyPress($event)\"\n\t\t[(ngModel)]=\"phoneNumber\"\n\t\t(ngModelChange)=\"onPhoneNumberChange()\"\n\t\t[disabled]=\"disabled\"\n\t\t[placeholder]=\"separateDialCodePlaceHolder(selectedCountry?.placeHolder || '')\"\n\t\t[attr.maxLength]=\"maxLength\"\n\t\t[attr.validation]=\"phoneValidation\"\n\t\t#focusable>\n</div>",
            providers: [
                CountryCode,
                {
                    provide: NG_VALUE_ACCESSOR,
                    // tslint:disable-next-line:no-forward-ref
                    useExisting: forwardRef(function () { return NgxIntlTelInputComponent_1; }),
                    multi: true,
                },
                {
                    provide: NG_VALIDATORS,
                    useValue: Éµ0,
                    multi: true,
                },
            ],
            styles: ["li.country:hover{background-color:rgba(0,0,0,.05)}.selected-flag.dropdown-toggle:after{content:none}.flag-container.disabled{cursor:default!important}.intl-tel-input.allow-dropdown .flag-container.disabled:hover .selected-flag{background:0 0}.country-dropdown{border:1px solid #ccc;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;padding:1px;border-collapse:collapse}.search-container{position:relative}.search-container input{width:100%;border:none;border-bottom:1px solid #ccc;padding-left:10px}.search-icon{position:absolute;z-index:2;width:25px;margin:1px 10px}.country-list{position:relative;border:none}.intl-tel-input input#country-search-box{padding-left:6px}.intl-tel-input.separate-dial-code .selected-flag,.intl-tel-input.separate-dial-code.allow-dropdown.iti-sdc-2 .selected-flag,.intl-tel-input.separate-dial-code.allow-dropdown.iti-sdc-3 .selected-flag,.intl-tel-input.separate-dial-code.allow-dropdown.iti-sdc-4 .selected-flag{width:93px}.intl-tel-input.separate-dial-code input,.intl-tel-input.separate-dial-code.allow-dropdown.iti-sdc-2 input,.intl-tel-input.separate-dial-code.allow-dropdown.iti-sdc-3 input,.intl-tel-input.separate-dial-code.allow-dropdown.iti-sdc-4 input{padding-left:98px}"]
        }),
        __metadata("design:paramtypes", [CountryCode])
    ], NgxIntlTelInputComponent);
    return NgxIntlTelInputComponent;
}());
export { NgxIntlTelInputComponent };
export { Éµ0 };
//# sourceMappingURL=data:application/json;base64,